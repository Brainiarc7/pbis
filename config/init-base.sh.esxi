# Generic cross-platform init script logic
# Copyright (c) Likewise Software, Inc.
# All rights reserved.
#
# Authors: Jerry Carter (gcarter@likewisesoftware.com)
#          Kyle Stemen (kstemen@likewisesoftware.com)
#          Brian Koropoff (bkoropoff@likewisesoftware.com)

# Implict arguments to this script when sourced:
#
# PROG_DESC - English description of program/service
# PROG_BIN - path to the program binary
# PROG_ARGS - additional arguments to pass to program on startup
# PROG_ERR - file where error diagnostics are logged
# PIDFILE - file where pid is stored (or empty/unset if a pid file is not created)
# SCRIPTNAME - the name of the init script

## Have to set the path for HP-UX boot process
PATH=/sbin:/usr/sbin:/bin:/usr/bin:$PATH
export PATH

##
## Determine what platform we are on
##
PLATFORM=""
if [ -f /etc/init.d/functions ]; then
    . /etc/init.d/functions
    PLATFORM="REDHAT"
elif [ "`uname -s`" = 'VMkernel' ]; then                                  
    PLATFORM="ESXI"                             
else
    PLATFORM="UNKNOWN"
fi

LOCKFILE="/var/lock/subsys/${SCRIPTNAME}"

##
## small wrapper functions around distro specific calls
##

status_success() {
    case "${PLATFORM}" in 
        REDHAT)
            echo_success
            echo
            ;;
        ESXI | UNKNOWN)
            echo "...ok"
            ;;
    esac
}

status_failed() {
    status=$1
    case "${PLATFORM}" in 
        REDHAT)
            echo_failure
            echo
            ;;
        ESXI | UNKNOWN)
            echo "...failed"
            ;;
    esac
}

print_status () {
    status=$1

    if [ $status = 0 ]; then
        status_success
    else
        status_failed $status
    fi
}

generic_status()
{
    #Uses return codes specified in
    # http://refspecs.freestandards.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
    pids="`generic_pid`"
    #Take the list of pids and get just the last one
    pid=""
    for i in $pids; do
        pid="$i"
    done

    if [ -n "$pid" ]
    then
        #Is the pid valid?
        #Does the program with that pid match our program name?
        #HP-UX needs UNIX95 set to support the -o option
        if [ "${PLATFORM}" = "ESXI" ]; then
            if kill -0 $pid > /dev/null 2>&1 ; then
                # pid is valid. have to assume it's the right program
                return 0
            else
                return 1
            fi
        fi
	pid_comm="`UNIX95=1 ps -p "$pid" -o args= 2>/dev/null | awk '{print $1}'`"
	if [ "$pid_comm" = "<defunct>" ]; then
            #It is a zombie process
            return 4
	fi
	if [ "$pid_comm" = "${PROG_BIN}" ]; then
            #If the system keeps cmdline files, check it
            if [ -f /proc/${pid}/cmdline ]; then
                #We can't check the exe file because we may be looking
                #at a version of the program that has been overwritten
		grep -q ${PROG_BIN} /proc/${pid}/cmdline && return 0
            else
		return 0
            fi
	fi
	
        #Program is dead, but lock file exists
	[ -f "${LOCKFILE}" ] && return 2
	
        #Program is dead, but pid file exists
	return 1
    else
	return 3
    fi
}

generic_pid()
{
    if [ -n "${PIDFILE}" -a -f "${PIDFILE}" ]
    then
	cat "${PIDFILE}"
    else
	case "${PLATFORM}" in
	    ESXI)
		( ps | grep "^[0-9]* [0-9]* `basename ${PROG_BIN}` *${PROG_BIN}" | awk '{ print $1 };' | head -1 )
		;;
	    *)
		( UNIX95=1; ps -e -o pid= -o args= | grep "^ *[0123456789]* *${PROG_BIN}" | awk '{ print $1 };' )
		;;
	esac
    fi
}

daemon_start() {

    if [ -f "${PROG_ERR}" ]; then
	/bin/rm -f $PROG_ERR;
    fi

    if [ -n "${STARTHOOK}" ]; then
	${STARTHOOK}
    fi

    case "${PLATFORM}" in 
        REDHAT)
            echo -n $"Starting `basename ${PROG_BIN}`: "
            daemon ${PROG_BIN} ${PROG_ARGS}
            status=$?
            ;;
        ESXI)
            echo -n "Starting $PROG_DESC"
            ulimit -s 100
            ${PROG_BIN} ${PROG_ARGS}
            status=$?
            if [ $status -eq 0 ]; then
                status=1
                for i in `seq 5`; do
                    #Did the program start?
                    generic_status
                    status=$?
                    [ $status -eq 0 ] && break
                    sleep 1
                done
            fi
            ;;
        UNKNOWN)
            ${PROG_BIN} ${PROG_ARGS}
            status=$?
            ;;
    esac

    if [ -n "${POSTSTARTHOOK}" ]; then
	${POSTSTARTHOOK}
    fi

    [ $status = 0 ] && [ ${PLATFORM} != "DEBIAN" ] && touch ${LOCKFILE}
    return $status
}

daemon_stop() {
    case "${PLATFORM}" in 
        REDHAT)
            echo -n $"Stopping `basename ${PROG_BIN}`: "
            killproc `basename ${PROG_BIN}`
            status=$?
            ;;
        ESXI)
            echo -n "Stopping $PROG_DESC"
            status=1
            #only try to stop the daemon if it is running
            if generic_status; then
                pid="`generic_pid`"
                kill -TERM $pid

                #Wait up to 5 seconds for the program to end
                for i in `seq 5`; do
                    #Did the program end?
                    generic_status
                    # Make sure the agent is not running and is not a zombie
                    # process.
                    [ $? -ne 0 -a $? -ne 4 ] && status=0 && break
                    # use the following line instead after bug 3634 is fixed
                    #[ $? -eq 3 -o $? -eq 2 ] && status=0 && break
                    sleep 1
                done
            fi
            ;;
        UNKNOWN)
            killall -TERM `basename ${PROG_BIN}`
            status=$?
            ;;
    esac

    [ $status = 0 ] && /bin/rm -f ${LOCKFILE}
    return $status
}

daemon_status() {
    case "${PLATFORM}" in
        REDHAT)
            status ${PROG_BIN}
            ;;
        ESXI)
            generic_status
            status=$?
            case "$status" in
                0)
                    echo "running";
                    ;;
                1)
                    echo "stopped";
                    #Use the bellow line instead after bug 3634 is fixed
                    #echo "died leaving pid file";
                    ;;
                2)
                    echo "died leaving lock file";
                    ;;
                3)
                    echo "stopped";
                    ;;
            esac
            return $status
        ;;
        UNKNOWN)
            echo "Not implemented."
            ;;
    esac
}

#Sends the signal specified by the first parameter to all instances
#of $PROG_BIN
generic_killall()
{
    #This gets the list of all current running instances of PROG_BIN,
    #but it can't tell which directory the program was run from. If
    #cmdline is available in the proc pseudo-filesystem, we'll verify
    #the pids.
    unverified_pids=`generic_pid`
    pids=
    for pid in $unverified_pids; do
        #If the system keeps cmdline files, check them
        if [ -f /proc/${pid}/cmdline ]; then
            #We can't check the exe file because we may be looking
            #at a version of the program that has been overwritten
            grep -q ${AUTHD_BIN} /proc/${pid}/cmdline && pids="$pids $pid"
        else
            pids="$pids $pid"
        fi
    done

    for pid in $pids; do
        [ ! -z "`UNIX95=1 ps -p $pid -o pid=`" ] && kill "$1" $pid
    done

    #The manpage of killall says it returns 0 if at least one process is
    #killed. I can't get it to return anything other than 0. Even if no
    #processes die with SIGTERM. We'll just return 0 here too
    return 0
}

####################################################################
## Main init script code
##

case "$1" in 
    start)
        daemon_start
        ret=$?
        print_status $ret
        ;;

    stop)
        daemon_stop
        ret=$?
        print_status $ret
        ;;

    restart)
        daemon_stop
        ret=$?
        print_status $ret
        daemon_start
        ret=$?
        print_status $ret
        ;;
        
    status)
        daemon_status
        ;;

    reload)
        echo -n "Reloading $PROG_DESC configuration file"
        killall -HUP `basename ${PROG_BIN}`

        ret=$?
        print_status $ret
        ;;

    *)
        echo "Usage: $0 {start|stop|restart|status|reload}"
        exit 1
        ;;
esac
