/* -*- mode: c++; -*-
 *-----------------------------------------------------------------------------
 * $RCSfile: Security.TXT,v $
 *
 * See Copyright for the status of this software.
 *
 * The OpenSOAP Project
 * http://opensoap.jp/
 *-----------------------------------------------------------------------------
 */
/**
 * @file OpenSOAP/Security.h
 * @brief OpenSOAP API セキュリティ処理
 * @author
 *    OpenSOAP Development Team
 */
/**
 * @def OPENSOAP_HA_MD2    (1)
 * @brief MD2ハッシュアルゴリズム定義
 */
/**
 * @def OPENSOAP_HA_MD4    (2)
 * @brief MD4ハッシュアルゴリズム定義
 */
/**
 * @def OPENSOAP_HA_MD5    (3)
 * @brief MD5ハッシュアルゴリズム定義
 */
/**
 * @def OPENSOAP_HA_MDC2   (4)
 * @brief MDC2ハッシュアルゴリズム定義
 */
/**
 * @def OPENSOAP_HA_RIPEMD (5)
 * @brief RIPEMD160ハッシュアルゴリズム定義
 */
/**
 * @def OPENSOAP_HA_SHA    (6)
 * @brief SHAハッシュアルゴリズム定義
 */
/**
 * @def OPENSOAP_CA_OWNER_LEN  (1024)
 * @brief 認証局データベースにおける所有者名の最大長さ
 */
/**
 * @def OPENSOAP_CERT_DATE_LEN   (14)
 * @brief 電子証明書の長さ
 */
    /**
     * @typedef struct tagOpenSOAPSecCert OpenSOAPSecCert
     * @brief OpenSOAPSecCert 構造体型定義
     */
    /**
     * @typedef OpenSOAPSecCert* OpenSOAPSecCertPtr
     * @brief OpenSOAPSecCert ポインタ型定義
     */
    /**
     * @typedef struct tagOpenSOAPCARec OpenSOAPCARec
     * @brief OpenSOAPCARec 構造体型定義
     */
    /**
     * @typedef OpenSOAPCARec* OpenSOAPCARecPtr
     * @brief OpenSOAPCARec ポインタ型定義
     */
    /**
      * @fn int OpenSOAPSecGenerateRSAKeys(const unsigned char* szSeedPhrase, FILE* fpPrivKey, FILE* fpPubKey)
      * @brief 秘密鍵と公開鍵のペアを作成し、秘密鍵を fpPrivKey に、公開鍵を fpPubKey に書き込みます。
      * @param
      *    szSeedPhrase const unsigned char * [in] ((|szSeedPhrase|)) 鍵生成の際に内部的にランダム値を生成利用するための文字列
      * @param
      *    fpPrivKey FILE * [in] ((|fpPrivKey|)) RSA 秘密鍵 File Stream
      * @param
      *    fpPubKey FILE * [in] ((|fpPubKey|)) RSA 公開鍵 File Stream
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecGenerateRSAKeysToFile(const unsigned char* szSeedPhrase, const char* szPrivKeyFileName, const char* szPubKeyFileName)
      * @brief 秘密鍵と公開鍵のペアを作成し、秘密鍵を szPrivKeyFileNameに, 公開鍵を szPubKeyFileName で示すファイルに書き込みます。
      * @param
      *    szSeedPhrase const unsigned char * [in] ((|szSeedPhrase|)) 鍵生成の際に内部的にランダム値を生成利用するための文字列
      * @param
      *    szPrivKeyFileName const char * [in] ((|szPrivKeyFileName\)) 秘密鍵 File Name
      * @param
      *    szPubKeyFileName const char * [in] ((|szPrivKeyFileName\)) 公開鍵 File Name
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecEncWithStream(OpenSOAPEnvelopePtr env, FILE* fpPubKey)
      * @brief Body内の下記条件に該当する属性を持つ要素全てに対し、その値をfpPubKeyにて与えられるRSA公開鍵を用いて暗号化します。
      *
      *・属性名   : encrypt\n
      *・namespace: http://opensoap.jp/auth/\n
      *・値       : True (boolean)
      * @param
      *    env OpenSOAPEnvelopePtr [in, out] ((|env|)) Envelope
      * @param
      *    fpPubKey FILE * [in] ((|fpPubKey|)) 公開鍵 File Stream
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecEncWithFile(OpenSOAPEnvelopePtr env, const char* szPubKName)
      * @brief 公開鍵の指定を szPubKName で示されるファイル名とする点を除いて OpenSOAPSecEncWithStream() と同様です。
      * @param
      *    env OpenSOAPEnvelopePtr [in, out] ((|env|)) Envelope
      * @param
      *    szPubKName const char * [in] ((|szPubKName|)) 公開鍵 File Name
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecDecWithStream(OpenSOAPEnvelopePtr env, FILE* fpPrivKey)
      * @brief  Body内の下記条件に該当する属性を持つ要素全てに対し、その値をfpPrivKeyにて与えられるRSA秘密鍵を用いて復号化します。
      *
      *・属性名   : encrypt\n
      *・namespace: http://opensoap.jp/auth/\n
      *・値       : True (boolean)
      * @param
      *    env OpenSOAPEnvelopePtr [in] ((|env|)) Envelope
      * @param
      *    fpPrivKey FILE * [in] ((|fpPrivKey|)) 秘密鍵 File Stream
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecDecWithFile(OpenSOAPEnvelopePtr env, const char* szPrivKName)
      * @brief 秘密鍵の指定を szPrivKName で示されるファイル名とする点を除いて OpenSOAPSecDecWithStream() と同様です。
      * @param
      *    env OpenSOAPEnvelopePtr [in] ((|env|)) Envelope
      * @param
      *    szPrivKName const char * [in] ((|szPrivKName|)) 秘密鍵 File Name
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecAddSignWithStream(OpenSOAPEnvelopePtr env, int iType, FILE* fpPrivKey, OpenSOAPStringPtr name)
      * @brief Body部全体に対するRSA電子署名を作成し、ヘッダ部に付加します。署名作成に当たっては、fpPrivKey で与えれる秘密鍵を利用します。

      * @param
      *    env OpenSOAPEnvelopePtr [in, out] ((|env|)) Envelope
      * @param
      *    iType int [in] ((|iType|)) ハッシュアルゴリズム (OPENSOAP_HA_*)
      * @param
      *    fpPrivKey FILE * [in] ((|fpPrivKey|)) 秘密鍵 File Stream
      * @param
      *    name OpenSOAPStringPtr [in] ((|name|)) 署名
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecAddSignWithFile(OpenSOAPEnvelopePtr env, int iType, const char* szPrivKName, OpenSOAPStringPtr name)
      * @brief 秘密鍵の指定を szPrivKName で示されるファイル名とする点を除いて OpenSOAPSecAddSignWithStream() と同様です。
      * @param
      *    env OpenSOAPEnvelopePtr [in, out] ((|env|)) Envelope
      * @param
      *    iType int [in] ((|iType|)) ハッシュアルゴリズム (OPENSOAP_HA_*)
      * @param
      *    szPrivKName const char * [in] ((|szPrivKName|)) 秘密鍵 File Name
      * @param
      *    name OpenSOAPStringPtr [in] ((|name|)) 署名
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCntSign(const OpenSOAPEnvelopePtr env, int* pnSig)
      * @brief envにて与えられるエンベロープに対し、現在付加されている署名の数を取得し、pnSigが指す領域に格納します。
      * @param
      *    env const OpenSOAPEnvelopePtr [in] ((|env|)) OpenSOAP Envelope
      * @param
      *    pnSig int * [out] ((|pnSig|)) 署名数
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecGetSignedByList(OpenSOAPEnvelopePtr env, int nCntMax, OpenSOAPStringPtr list[], int* pnCntPacked)
      * @brief 署名者リストを取得します。呼出側がnCntMax 個だけ list で示す結果格納領域を準備します。pnCntPackedで示した領域に取得した個数が格納されます。(最大で nCntMax 個)
      * @param
      *    env OpenSOAPEnvelopePtr [in] ((|env|)) OpenSOAP Envelope
      * @param
      *    nCntMax int [in] ((|nCntMax|)) 最大数
      * @param
      *    list[] OpenSOAPStringPtr [in, out] ((|list[]|)) 署名者リスト格納バッファ
      * @param
      *    pnCntPacked int * [out] ((|pnCntPacked|)) 個数格納バッファ
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecVerifySignWithStream(OpenSOAPEnvelopePtr env, FILE* fpPubKey)
      * @brief Body部全体に対するRSA電子署名を検証します。
      *
      * 署名検証に当たっては、 fpPubKey で与えられる公開鍵を利用します。署名が複数ある場合は、最低１個が検証OKとなればOKとしています。
      * @param
      *    env OpenSOAPEnvelopePtr [in, out] ((|env|)) OpenSOAP Envelope
      * @param
      *    fpPubKey FILE * [in] ((|fpPubKey|)) 公開鍵 File Stream
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecVerifySignWithFile(OpenSOAPEnvelopePtr env, const char* szPubKName)
      * @brief 公開鍵の指定を szPubKName で示されるファイル名とする点を除いて OpenSOAPSecVerifySignWithStream() と同様です。
      * @param
      *    env OpenSOAPEnvelopePtr [in, out] ((|env|)) OpenSOAP Envelope
      * @param
      *    szPubKName const char * [in] ((|szPubKName||) 公開鍵 File Name
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertCreateWithStream(const char* szPublish, FILE* fpPrivKey, int iHashType, const OpenSOAPCARecPtr pRec, FILE* fpCert)
      * @brief 電子証明書を作成する。
      *
      * 以下のデータを受けて電子証明書を fpCert に書き込む。\n
      *\n
      *  (a) szPublish : 発行者名\n
      *  (b) fpPrivKey : 発行者の秘密鍵ファイルのストリーム\n
      *  (c) iHashType : 署名の際のハッシュアルゴリズム。以下から選択する\n
      *        OPENSOAP_HA_MD5    : MD5アルゴリズム\n
      *        OPENSOAP_HA_RIPEMD : RIPEMD160アルゴリズム\n
      *        OPENSOAP_HA_SHA    : SHAアルゴリズム\n
      *  (d) pRec      : 認証局データベースのレコード
      * @param
      *    szPublish const char * [in] ((|szPublish|)) 発行者名
      * @param
      *    fpPrivKey FILE * [in] ((|fpPrivKey|)) 秘密鍵(発行者）
      * @param
      *    iHashType int [in] ((|iHashType|)) ハッシュアルゴリズム (OPENSOAP_HA_*)
      * @param
      *    pRec const OpenSOAPRecPtr [in] ((|pRec|)) 認証局レコード
      * @param
      *    fpCert FILE * [out] ((|fpCert|)) 電子証明書ファイル名
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertCreateWithFile(const char* szPublish, const char* szPrivKeyFile, int iHashType, const OpenSOAPCARecPtr pRec, const char* szCertName)
      * @brief 秘密鍵と電子証明書をそれぞれファイル名指定とする(szPrivKeyFile, szCertName)点を除いてOpenSOAPSecCertCreateWithStream() と同様です。
      * @param
      *    szPublish const char * [in] ((|szPublish|)) 発行者名
      * @param
      *    szPrivKeyFile const char * [in] ((|szPrivKeyFile|)) 秘密鍵ファイル名(発行者）
      * @param
      *    iHashType int [in] ((|iHashType|)) ハッシュアルゴリズム (OPENSOAP_HA_*)
      * @param
      *    pRec const OpenSOAPCARecPtr [in] ((|pRec|)) 認証局レコード
      * @param
      *    szCertName const char * [in] ((|szCertName|)) 電子証明書ファイル名
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertLoadFromMem(size_t sizArea, const unsigned char* pucArea, OpenSOAPSecCertPtr* ppCert)
      * @brief pucArea で示された sizArea の領域から電子証明書をロードし、ppCert の指す領域に格納します。
      * @param
      *    sizArea size_t [in] ((|sizArea|)) Input 領域サイズ
      * @param
      *    pucArea const unsigned char * [in] ((|pucArea|)) Input 領域ポインタ
      * @param
      *    ppCert OpenSOAPSecCertPtr * [out] ((|ppCert|)) 電子証明書
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertLoad(const char* szName, OpenSOAPSecCertPtr* ppCert)
      * @brief ロード元が szName で示される領域である点を除いて、 OpenSOAPSecCertLoadFromMem() と同様です。
      * @param
      *    szName const char * [in] ((|szName|)) ファイル名
      * @param
      *    ppCert OpenSOAPSecCertPtr * [out] ((|ppCert|)) 電子証明書
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertFree(OpenSOAPSecCertPtr ppCert)
      * @brief pCertで与えられた電子証明書の領域を開放します。
      * @param
      *    ppCert OpenSOAPSecCertPtr * [in] ((|ppCert|)) Certificate
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertVerifyWithStream(FILE* fpCert, FILE* fpPubKey)
      * @brief 指定された公開鍵を利用して、電子証明書の署名を検証します。
      *
      * 電子証明書、公開鍵にそれぞれ fpCert, fpPubKey で示されるファイルポインタを与えます。
      * @param
      *    fpCert FILE * [in] ((|fpCert|)) 電子証明書 File Stream
      * @param
      *    fpPubKey FILE * [in] ((|fpPubKey|)) 公開鍵 File Stream
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertVerifyWithFile(const char* szCertName, const char* szPubKeyName)
      * @brief 指定された公開鍵を利用して、電子証明書の署名を検証します。
      *
      * 電子証明書、公開鍵にそれぞれ szCertName, szPubKeyName で示されるファイル名を与えます。
      * @param
      *    szCertName const char * [in] ((|szCertName|)) 電子証明書 File Name
      * @param
      *    szPubKeyName const char * [in] ((|szPubKeyName|)) 公開鍵 File Name
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertGetPublisherName(OpenSOAPSecCertPtr pCert, char** pszName)
      * @brief 発行者名を pszName が指す領域に設定します。
      *
      * この領域は電子証明書内の領域を指すので開放しないこと。
      * @param
      *    pCert OpenSOAPSecCertPtr [in] ((|pCert|)) 電子証明書
      * @param
      *    pszName char ** [out] ((|pszName|)) 発行者名 (内部領域)
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertGetSerialNo(OpenSOAPSecCertPtr pCert, unsigned long* pulSerial)
      * @brief シリアル番号を pulSerial が指す領域に格納します。
      * @param
      *    pCert OpenSOAPSecCertPtr [in] ((|pCert|)) 電子証明書
      * @param
      *    pulSerial unsigned long * [out] ((|pulSerial|)) シリアル番号
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertGetOwnerName(OpenSOAPSecCertPtr pCert, char** pszName)
      * @brief 所有者の名前を取得します。
      * @param
      *    pCert OpenSOAPSecCertPtr [in] ((|pCert|)) 電子証明書
      * @param
      *    pszName char ** [out] ((|pszName|)) 所有者名 (内部領域)
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertGetEndDate(OpenSOAPSecCertPtr pCert, char** pszDate)
      * @brief 証明書の有効期限を、年月日時分秒の順に、年のみ4桁、その他2桁とした文字列で pszDate が示す領域に設定します。
      *
      * (例："20020211120000")　この領域は電子証明書内の領域を指すので開放しないこと。\n
      * またNULL文字で終了していないことに注意のこと(文字列長は14桁固定です)。
      * @param
      *    pCert OpenSOAPSecCertPtr [in] ((|pCert|)) 電子証明書
      * @param
      *    pszDate char ** [out] ((|pszDate|)) 日付 (内部領域)
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCertGetPubKey(OpenSOAPSecCertPtr pCert, const char* szSaveName)
      * @brief 電子証明書内の公開鍵を取得し、 szSaveName で示すファイルに格納します。
      *
      * この公開鍵はASCII化されたものであって、本ライブラリで通常利用する公開鍵と同一の書式です。
      * @param
      *    pCert OpenSOAPSecCertPtr [in] ((|pCert|)) 電子証明書ポインタ
      * @param
      *    szSaveName const char * [in] ((|szSaveName|)) 公開鍵ファイル名
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecDecodeKeyFile(FILE* fp, unsigned long* pulLenOut, unsigned char** ppucDecode)
      * @brief fpにて与えられる鍵ファイルをバイナリ化します。
      *
      * バイナリ化後のデータサイズは pulLenOutの指す領域に書き込まれます。
      * @param
      *    fp FILE * [in] ((|fp|)) File Stream
      * @param
      *    pulLenOut unsigned long * [out] ((|pulLenOut|)) 出力データの長さ
      * @param
      *    ppucDecode unsigned char ** [out] ((|ppucDecode|)) バイナリ化データ
      * @note
      *    バイナリ化されたデータは ppucDecode の指す領域に書き込まれます。バイナリ化されたデータは、利用後 free()をコールして開放すること。
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCABrowse(FILE* fpOut)
      * @brief 現在のCA-DBの全内容をfpOutに対しブラウズ出力します。１行に対し、１レコード分出力します。
      *
      * １行には次の情報群が順に出力されます。\n
      *  (a)シリアル番号\n
      *     10進数10桁で表示される。シリアル番号はDB内でユニークな数値であり、一旦登録されると以降変更されることは無い。\n
      *  (b)失効情報\n
      *     そのレコードが失効している場合は、文字'*'が出力され、そうでない場合はスペースが出力される。\n
      *  (c)所有者名称\n
      *     括弧("[]")で囲まれた文字列として出力される。\n
      *  (d)有効期限\n
      *     年月日時分秒の順に、年のみ4桁、その他2桁で出力される。\n
      *\n
      *     <失効データの例>\n
      *     0000000002*[Juventus] 20020211120000\n
      *     <通常データの例>\n
      *     0000000003 [A.C.Milan] 20020201120000
      * @param
      *    fpOut FILE * [in] ((|fpOut|)) Output Stream
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCABrowseRec(const OpenSOAPCARecPtr pRec, FILE* fpOut)
      * @brief OpenSOAPSecCABrowse()を、対象を１レコードとしたものです。
      * @param
      *    pRec const OpenSOAPCARecPtr [in] ((|pRec|)) レコード
      * @param
      *    fpOut FILE * [in] ((|fpOut|)) Output Stream
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCARegist(const char* szNameOwner, const char* szTermDate, size_t sizPubkey, const unsigned char* szPubKey, unsigned long* pulSerialNo)
      * @brief 公開鍵を登録します。以下に示す値を設定します。
      *
      *  (a)szNameOwner\n
      *     鍵の所有者名称(文字列)。文字列長は、最大 OPENSOAP_CA_OWNER_LEN - 1 とすること。\n
      *  (b)szTermDate\n
      *     有効期限を、年月日時分秒の順に、年のみ4桁、その他2桁とした文字列で指定する(例："20020211120000")。\n
      *     文字列長は14桁固定、末尾はNULL文字で終了すること。\n
      *  (c)sizPubKey\n
      *     公開鍵のデータ長(バイト数)。OpenSOAPSecDecodeKeyFile()を用いて、バイナリ化した後のデータに対する値とする。\n
      *  (d)szPubKey\n
      *     公開鍵データ(バイナリ)。\n
      *\n
      *  本関数が成功すると、pulSerialNoで示す領域に登録されたシリアル番号が返される。\n
      *
      * @param
      *    szNameOwner const char * [in] ((|szNameOwner|)) 所有者名
      * @param
      *    szTermDate const char * [in] ((|szTermDate|)) 有効期限 ("YYYYMMDDHHMMSS")
      * @param
      *    sizPubkey size_t [in] ((|sizPubkey|)) 公開鍵のサイズ
      * @param
      *    szPubKey const unsigned char * [in] ((|szPubKey|)) 公開鍵
      * @param
      *    pulSerialNo unsigned long * [out] ((pulSerialNo|)) シリアル番号
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCAInvalidate(const char* szNameOwner, unsigned long ulSerial)
      * @brief 所有者名が szNameOwner で、シリアル番号が ulSerial であるレコードを失効とします。
      *
      *本処理では、レコードの削除までは行わず、失効されたレコード自体はデータベースに残ります。
      * @param
      *    szNameOwner const char * [in] ((|szNameOwner|)) 所有者名
      * @param
      *    ulSerial unsigned long [in] ((|ulSerial|)) シリアル番号
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCASearchRecords(const char* szNameOwner, int* pnRec, long** pplIdxs)
      * @brief szNameOwner で指定した所有者名に該当する全てのレコードを検索し、その数を pnRec が指す領域に格納します。
      * 
      * また、pplIdxs が指す領域には、その数分のインデックス群(シリアル番号ではない)を格納する領域を確保し、\n
      * インデックス群を格納します。このそれぞれのインデックスから、OpenSOAPSecCAGetRecord() を利用することによって\n
      * 実際のレコードを取得することが可能となります。
      * @param
      *    szNameOwner const char * [in] ((|szNameOwner|)) 所有者名
      * @param
      *    pnRec int * [out] ((|pnRec|)) レコード数
      * @param
      *    pplIdxs lomg ** [out] ((|pplIdxs|)) インデックス番号
      * @note
      *    インデックス群の領域は、利用後 free() によって開放すること。
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCASearchOneRecord(const char* szNameOwner, OpenSOAPCARecPtr* ppRec)
      * @brief szNameOwner で指定した所有者名に該当するレコードを１個検索し、 ppRec が指す領域に格納します。
      *
      * 同一所有者のレコードが複数存在する場合は、最も有効期限が遅いレコードを取得します。
      * @param
      *    szNameOwner const char * [in] ((|szNameOwner|)) 所有者名
      * @param
      *    ppRec OpenSOAPCARecPtr * [out] ((|ppRec|)) レコード
      * @note
      *    取得したレコードは、使用後 OpenSOAPSecCAFreeRecord() を用いて開放すること。
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCAGetRecord(long lIdx, OpenSOAPCARecPtr* ppRec)
      * @brief lIdxで示したレコードを取得し、 ppRec が指す領域に格納します。
      * @param
      *    lIdx long [in] ((|lIdx|)) Index
      * @param
      *    ppRec OpenSOAPCARecPtr * [out] ((|ppRec|)) レコード
      * @note
      *    取得したレコードは、使用後 OpenSOAPSecCAFreeRecord() を用いて開放すること。
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCAFreeRecord(OpenSOAPCARecPtr pRec)
      * @brief pRecで与えられたレコードの領域を開放する。
      * @param
      *    pRec OpenSOAPCARecPtr [in] ((|pRec|)) レコード
      * @return
      *    エラーコード
      */
    /**
      * @fn int OpenSOAPSecCARemoveRecord(unsigned long ulSerial)
      * @brief シリアル番号 ulSerial を持つレコードをデータベースから完全に削除します。
      *
      * 本関数は、レコード自体は残される OpenSOAPSecCAInvalidate() とは異なることに注意のこと。
      * @param
      *    ulSerial unsigned long [in] ((|ulSerial|)) シリアル番号
      * @return
      *    エラーコード
      */
