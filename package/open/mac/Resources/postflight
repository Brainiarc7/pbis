#!/bin/bash

UPGRADEDIR=/var/lib/pbis-upgrade

LOG=/var/log/pbis-open-install.log
TLOG=/tmp/pbis-open-install.tmp

DAEMONS_TO_KILL="lwsmd lwregd netlogond lwiod dcerpcd eventlogd lsassd reapsysld"

# Display to screen and log file with a blank line between entries.
log()
{
    echo $@
    echo
    echo $@ >> $LOG
    echo >> $LOG
}

# Display to screen and log file with no blank line.
_log()
{
    echo $@
    echo $@ >> $LOG
}

# Display to file.
logfile()
{
    echo $@ >> $LOG
    echo >> $LOG
}

# Execute command.
# If successful, note in log file.
# If not successful, note on screen and log file.
run()
{
    "$@" > $TLOG 2>&1
    err=$?
    if [ $err -eq 0 ]; then
        echo "Success: $@" >> $LOG
        cat $TLOG >> $LOG
        echo >> $LOG
    else
        _log "Error: $@ returned $err"
        _log `cat $TLOG`
        _log
    fi
    rm -f $TLOG > /dev/null 2>&1
    return $err
}

# Execute command.
# Log only to file.
run_quiet()
{
    "$@" > $TLOG 2>&1
    err=$?
    if [ $err -eq 0 ]; then
        echo "Success: $@" >> $LOG
    else
        echo "Error: $@ returned $err  (ignoring and continuing)" >> $LOG
    fi
    cat $TLOG >> $LOG
    echo >> $LOG
    rm -f $TLOG > /dev/null 2>&1
    return $err
}

# Execute command.
# If successful, note in log file.
# If not successful, note on screen and log file and then exit.
run_or_fail()
{
    "$@" > $TLOG 2>&1
    err=$?
    if [ $err -eq 0 ]; then
        echo "Success: $@" >> $LOG
        cat $TLOG >> $LOG
        echo >> $LOG
    else
        _log "Error: $@ returned $err  (aborting this script)"
        _log `cat $TLOG`
        _log
        rm -f $TLOG > /dev/null 2>&1
        exit 1
    fi
    rm -f $TLOG > /dev/null 2>&1
    return $err
}

ConfigureDirectoryOwners()
{
    log "Prepare directories"

    CHOWN_0_80="/opt/ @MK_PREFIX@ /etc/ @MK_SYSCONFDIR@ /var/ /var/lib/ @LW_CACHEDIR@"
    CHOWN_0_0="/usr/ /usr/lib/"

    ETC_LW="@MK_SYSCONFDIR@"

    for f in $CHOWN_0_80; do
        case "$f" in
            */)
                 CHOWNFLAGS=''
                 ;;
             *)
                 CHOWNFLAGS='-R'
                 ;;
        esac

        if [ -d "$f" ]; then
            run_or_fail chown $CHOWNFLAGS 0:80 "$f"
        else
            run_or_fail mkdir "$f"
            run_or_fail chown $CHOWNFLAGS 0:80 "$f"
        fi
    done

    for f in $CHOWN_0_0; do
        if [ -d "$f" ]; then
            run_or_fail chown 0:0 "$f"
        else
            run_or_fail mkdir "$f"
            run_or_fail chown 0:0 "$f"
        fi
    done
}

wait_for_lwsm_running_status()
{
    status=1

    while [ $status -ne 0 ]; do
        @MK_BINDIR@/lwsm list > /dev/null 2>&1
        status=$?
        sleep 1
    done

    log "Service lwsmd running"
}

wait_for_service_running_status()
{
    SERVICE=$1
    status=1

    while [ $status -ne 0 ]; do
        @MK_BINDIR@/lwsm status $SERVICE > /dev/null 2>&1
        status=$?
        sleep 1
    done

    log "Service $SERVICE running"
}

configure_and_start_lwsmd()
{
    SERVICE_NAME=com.beyondtrust.pbis.lwsmd
    SERVICE_DAEMON=/Library/LaunchDaemons/$SERVICE_NAME.plist
    SERVICE_DAEMON_INSTALL=/etc/pbis/LaunchDaemons/$SERVICE_NAME.plist

    if [ -f $SERVICE_DAEMON_INSTALL ]; then
        log "Configuring and starting lwsmd service with launchctl"
        run_or_fail cp "$SERVICE_DAEMON_INSTALL" "$SERVICE_DAEMON"
        run_or_fail launchctl load "$SERVICE_DAEMON"
        run_or_fail launchctl start "$SERVICE_NAME"
        wait_for_lwsm_running_status
    fi
}

enable_plugin()
{
    PLUGIN_DIR=LWDSPlugin.dsplug
    SRC_DIR=@PRIMARY_LIBDIR@
    FRAMEWORK_DIR="/System/Library/Frameworks/DirectoryService.framework/Resources/Plugins"
    LIBRARY_DS_DIR="/Library/DirectoryServices/PlugIns"

    for plugin in LWIDSPlugIn LWEDSPlugIn LWDSPlugin ; do
        path="$FRAMEWORK_DIR/${plugin}.dsplug"
        if [ -h "${path}" ]; then
            run_or_fail rm -fv "${path}"
        fi
    done

    for plugin in LWIDSPlugIn LWEDSPlugIn LWDSPlugin ; do
        path="$LIBRARY_DS_DIR/${plugin}.dsplug"
        if [ -d "${path}" ]; then
            run_or_fail rm -r "${path}"
        fi
    done

    # Install new plugin
    run_or_fail mkdir -p "$LIBRARY_DS_DIR"
    run_or_fail cp -r "$SRC_DIR/$PLUGIN_DIR" "$LIBRARY_DS_DIR/$PLUGIN_DIR"

    if [ -f /usr/bin/setfile ]; then
        run_or_fail /usr/bin/setfile -a V /opt
    else
        grep opt /.hidden > /dev/null
        if [ $? -ne 0 ]; then
            echo "opt" >> /.hidden
        fi
    fi

    killall DirectoryService opendirectoryd dspluginhelperd
    sleep 5

}

enable_auth_plugin()
{
    PLUGIN_DIR=com.likewise.bundle
    SRC_DIR="@PRIMARY_LIBDIR@/SecurityAgentPlugins"
    LIBRARY_PLUGIN_DIR="/Library/Security/SecurityAgentPlugins"

    # Install auth plugin
    log "Installing auth plugin"
    mkdir -p $LIBRARY_PLUGIN_DIR
    cp -r $SRC_DIR/$PLUGIN_DIR $LIBRARY_PLUGIN_DIR/$PLUGIN_DIR

    for module in @MK_PREFIX@/lib/AuthMechanisms/*.so
    do
        mechanism=`basename "$module" .so`
        log "Enabling auth mechanism '$mechanism'"
        run_or_fail @MK_PREFIX@/libexec/authmechanism enable "$mechanism"
    done
}

configure_logon_message_application()
{
    /usr/bin/defaults read /Library/Preferences/loginwindow | grep 'Likewise Logon Message.app' > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        log "Configuring Likewise Logon Message application"
        defaults write /Library/Preferences/loginwindow AutoLaunchedApplicationDictionary -array-add '{ "Path" = "@MK_BINDIR@/Likewise Logon Message.app"; "Hide" = "0"; }'
    else
        log "Likewise Logon Message application already configured"
    fi
}

configure_agent()
{
    agent_name="$1"
    AGENT_PLIST=/Library/LaunchAgents/$agent_name.plist
    AGENT_PLIST_INSTALL=/etc/pbis/LaunchAgents/$agent_name.plist

    if [ -f $AGENT_PLIST_INSTALL ]; then
        run_or_fail cp "$AGENT_PLIST_INSTALL" "$AGENT_PLIST"
    fi
}

import_5_0123_file()
{
    CONVERT='@MK_LIBEXECDIR@/conf2reg'
    REGSHELL='@MK_BINDIR@/regshell'

    COMMAND=$1
    SOURCE=$2
    # DEST is not necessary for some commands.
    DEST=$3

    if [ -f "$SOURCE" ]; then
        run_quiet "$CONVERT" "$COMMAND" "$SOURCE" $DEST
        if [ $? -ne 0 ]; then
            log "There was a problem converting $SOURCE. Please file a bug and attach $SOURCE."
            return 1
        fi

        if [ -n "$DEST" -a -f "$DEST" ]; then
            run_quiet "$REGSHELL" import "$DEST"
            if [ $? -ne 0 ]; then
                log "There was a problem converting $SOURCE. Please file a bug and attach $SOURCE and $DEST."
                return 1
            fi
        fi
    fi
    return 0
}

restore_5_0123_configuration()
{
    if [ -z "$UPGRADING_FROM_5_0123" ]; then
        return 0
    fi

    import_5_0123_file --lsass "${UPGRADEDIR}/lsassd.conf" \
        "${UPGRADEDIR}/lsassd.conf.reg"

    import_5_0123_file --netlogon "${UPGRADEDIR}/netlogon.conf" \
        "${UPGRADEDIR}/netlogon.conf.reg"

    import_5_0123_file --eventlog "${UPGRADEDIR}/eventlogd.conf" \
        "${UPGRADEDIR}/eventlogd.conf.reg"

    import_5_0123_file --pstore-sqlite "${UPGRADEDIR}/pstore.db"
}

restore_6_0_configuration()
{
    if [ -z "$UPGRADING_FROM_6_0" ]; then
        return 0
    fi

    run_or_fail mkdir -p '@LW_CACHEDIR@/db'
    run_or_fail chmod 700 '@LW_CACHEDIR@/db'
    run_or_fail chown 0:80 '@LW_CACHEDIR@/db'

    if [ -f "${UPGRADEDIR}/registry.db" ]; then
        run_or_fail cp "${UPGRADEDIR}/registry.db" '@LW_CACHEDIR@/db/registry.db'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/registry.db'
    fi

    if [ -f "${UPGRADEDIR}/sam.db" ]; then
        run_or_fail cp "${UPGRADEDIR}/sam.db" '@LW_CACHEDIR@/db/sam.db'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/sam.db'
    fi

    if [ -f "${UPGRADEDIR}/lwi_events.db" ]; then
        run_or_fail cp "${UPGRADEDIR}/lwi_events.db" '@LW_CACHEDIR@/db/lwi_events.db'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/lwi_events.db'
    fi

    if [ -f "${UPGRADEDIR}/lsass-adcache.db" ]; then
        run_or_fail cp "${UPGRADEDIR}/lsass-adcache.db" '@LW_CACHEDIR@/db/lsass-adcache.db'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/lsass-adcache.db'
    fi

    if [ -f "${UPGRADEDIR}/lsass-adcache.filedb" ]; then
        run_or_fail cp "${UPGRADEDIR}/lsass-adcache.filedb" '@LW_CACHEDIR@/db/lsass-adcache.filedb'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/lsass-adcache.filedb'
    fi

    run_quiet rm -r "${UPGRADEDIR}"
}

restore_6_1_configuration()
{
    if [ -z "$UPGRADING_FROM_6_1" ]; then
        return 0
    fi

    run_or_fail mkdir -p '@LW_CACHEDIR@/db'
    run_or_fail chmod 700 '@LW_CACHEDIR@/db'
    run_or_fail chown 0:80 '@LW_CACHEDIR@/db'

    if [ -f "${UPGRADEDIR}/registry.db" ]; then
        run_or_fail cp "${UPGRADEDIR}/registry.db" '@LW_CACHEDIR@/db/registry.db'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/registry.db'
    fi

    if [ -f "${UPGRADEDIR}/sam.db" ]; then
        run_or_fail cp "${UPGRADEDIR}/sam.db" '@LW_CACHEDIR@/db/sam.db'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/sam.db'
    fi

    if [ -f "${UPGRADEDIR}/lwi_events.db" ]; then
        run_or_fail cp "${UPGRADEDIR}/lwi_events.db" '@LW_CACHEDIR@/db/lwi_events.db'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/lwi_events.db'
    fi

    if [ -f "${UPGRADEDIR}/lsass-adcache.db" ]; then
        run_or_fail cp "${UPGRADEDIR}/lsass-adcache.db" '@LW_CACHEDIR@/db/lsass-adcache.db'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/lsass-adcache.db'
    fi

    if [ -f "${UPGRADEDIR}/lsass-adcache.filedb" ]; then
        run_or_fail cp "${UPGRADEDIR}/lsass-adcache.filedb" '@LW_CACHEDIR@/db/lsass-adcache.filedb'
        run_or_fail chmod 700 '@LW_CACHEDIR@/db/lsass-adcache.filedb'
    fi

    run_quiet rm -r "${UPGRADEDIR}"
}

import_registry_configurations()
{
    REGSHELL='@MK_BINDIR@/regshell'

    log "Importing registry..."
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/dcerpcd.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/eventlogd.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/lsassd.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/privileges.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/accounts.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/lwiod.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/lwreg.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/netlogond.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/rdr.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/reapsysl.reg"
    run_or_fail "$REGSHELL" import "@LW_CONFIGDIR@/lwdsplugin.reg"
}

determine_upgrade_type()
{
    PRESERVEDVERSIONFILE="${UPGRADEDIR}/VERSION"

    if [ -f "$PRESERVEDVERSIONFILE" ]; then
        run_or_fail cat "$PRESERVEDVERSIONFILE"
        if [ -n "`grep '^VERSION=5.0' $PRESERVEDVERSIONFILE`" ]; then
            UPGRADING_FROM_5_0123=1
            log "Upgrading from Likewise Identity Services Open 5.0"
        elif [ -n "`grep '^VERSION=5.1' $PRESERVEDVERSIONFILE`" ]; then
            UPGRADING_FROM_5_0123=1
            log "Upgrading from Likewise Identity Services Open 5.1."
        elif [ -n "`grep '^VERSION=5.2' $PRESERVEDVERSIONFILE`" ]; then
            UPGRADING_FROM_5_0123=1
            log "Upgrading from Likewise Identity Services Open 5.2."
        elif [ -n "`grep '^VERSION=5.3' $PRESERVEDVERSIONFILE`" ]; then
            UPGRADING_FROM_5_0123=1
            log "Upgrading from Likewise Identity Services Open 5.3."
        elif [ -n "`grep '^VERSION=6.0' $PRESERVEDVERSIONFILE`" ]; then
            UPGRADING_FROM_6_0=1
            log "Upgrading from Likewise Open 6.0."
        elif [ -n "`grep '^VERSION=6.1' $PRESERVEDVERSIONFILE`" ]; then
            UPGRADING_FROM_6_1=1
            log "Upgrading from Likewise Open 6.1."
        fi
    fi
}

relocate_domain_separator()
{
    DomainSeparator=`@MK_BINDIR@/regshell list_values '[HKEY_THIS_MACHINE\Services\lsass\Parameters\Providers\ActiveDirectory]' | grep DomainSeparator | sed -e 's/ *[^ ]\+[ ]\+[^ ]\+[ ]\+"\([^ ]*\)"$/\1/'`

    if [ -n "${DomainSeparator}" ]; then
        if [ "$DomainSeparator" = "\\\\" ]; then
            DomainSeparator="\\"
        fi

        run_quiet '@MK_BINDIR@/regshell' set_value '[HKEY_THIS_MACHINE\Services\lsass\Parameters]' 'DomainSeparator' "$DomainSeparator"
    fi
}

relocate_space_replacement()
{
    SpaceReplacement=`@MK_BINDIR@/regshell list_values '[HKEY_THIS_MACHINE\Services\lsass\Parameters\Providers\ActiveDirectory]' | grep SpaceReplacement | sed -e 's/ *[^ ]\+[ ]\+[^ ]\+[ ]\+"\([^ ]*\)"$/\1/'`

    if [ -n "${SpaceReplacement}" ]; then
        run_quiet '@MK_BINDIR@/regshell' set_value '[HKEY_THIS_MACHINE\Services\lsass\Parameters]' 'SpaceReplacement' "$SpaceReplacement"
    fi
}

remove_npfs_dependencies()
{
    run_quiet '@MK_BINDIR@/regshell' set_value '[HKEY_THIS_MACHINE\Services\lwio\Parameters\Drivers]' 'Load' 'rdr'
    run_quiet '@MK_BINDIR@/regshell' set_value '[HKEY_THIS_MACHINE\Services\lsass]' 'Dependencies' 'netlogon lwio lwreg rdr'
}

fix_60_registry()
{
    REGSHELL='@MK_BINDIR@/regshell'

    if [ -z "$UPGRADING_FROM_6_0" ]; then
        return 0
    fi

    # Migrate pstore entries from default to joined domain
    run '@MK_LIBEXECDIR@/regupgr61.sh' --install

    # Migrate some other entries
    relocate_domain_separator
    relocate_space_replacement
}

cleanup_registry()
{
    run_or_fail "${REGSHELL}" cleanup "@LW_CONFIGDIR@/dcerpcd.reg"
    run_or_fail "${REGSHELL}" cleanup "@LW_CONFIGDIR@/eventlogd.reg"
    run_or_fail "${REGSHELL}" cleanup "@LW_CONFIGDIR@/lsassd.reg"
    run_or_fail "${REGSHELL}" cleanup "@LW_CONFIGDIR@/lwiod.reg"
    run_or_fail "${REGSHELL}" cleanup "@LW_CONFIGDIR@/lwreg.reg"
    run_or_fail "${REGSHELL}" cleanup "@LW_CONFIGDIR@/netlogond.reg"
}

##
## Main
##

log "Finalizing PowerBroker Identity Services installation"

ConfigureDirectoryOwners

#
# Upgrading OS X (at least 10.6 to 10.7) deletes /var/lib/pbis.
# So on OS X we actually use /opt/pbis/var and put in a symlink
# back to /var/lib/pbis.  On every boot we make sure the symlink is
# still there before starting our daemons.
#

mkdir -p /opt/pbis/var 2>/dev/null

# The 6.1 postflight script created this location as a directory. Pull in the
# state files and create a symlink for the old location incase some old
# libraries are still running in memory (but deleted from the hard disk).
if [ -d /opt/likewise/var -a ! -h /opt/likewise/var ]; then
    run_or_fail mv -f /opt/likewise/var/* /opt/pbis/var/
    run_or_fail rm -rf /opt/likewise/var
fi
run_or_fail rm -f /opt/likewise/var
run_or_fail ln -s /opt/pbis/var /opt/likewise/var

# The 6.1 and older packages created this location. First pull in the state
# files. If the old location exists as a symlink delete it, since it could
# point to the wrong location. Then create a symlink for the old location
# incase some old libraries are still running in memory (but deleted from the
# hard disk).
if [ -d /var/lib/likewise -a ! -h /var/lib/likewise ]; then
    run_or_fail mv -f /var/lib/likewise/* /opt/pbis/var/
    run_or_fail rm -rf /var/lib/likewise
fi
run_or_fail rm -f /var/lib/likewise
run_or_fail ln -s /opt/pbis/var /var/lib/likewise

# The 6.5 and newer installer puts files in /var/lib/pbis. Move them to
# /opt/pbis/var and put a symlink in place so the currently installed binaries
# can still find them through /var/lib/pbis. If it already exists as a symlink,
# assume it points to the correct location.
if [ ! -h /var/lib/pbis ]; then
    if [ -d /var/lib/pbis ]; then
        run_or_fail mv /var/lib/pbis/* /opt/pbis/var/
        run_or_fail rm -rf /var/lib/pbis
    fi
    run_or_fail ln -s /opt/pbis/var /var/lib/pbis
fi

determine_upgrade_type

restore_6_0_configuration

restore_6_1_configuration

run_or_fail '@MK_SBINDIR@/lwsmd' --start-as-daemon --loglevel debug

restore_5_0123_configuration

import_registry_configurations

fix_60_registry

cleanup_registry

remove_npfs_dependencies

run_or_fail '@MK_BINDIR@/lwsm' shutdown

configure_and_start_lwsmd

# Configure PBIS DS plugin
enable_plugin

# Configure PBIS Auth plugin
enable_auth_plugin

# Add PBIS DS Plugin to Search list
echo "Adding DS plugin to search list"
run /usr/bin/dscl /Search -create / SearchPolicy CSPSearchPath

if ! run /usr/bin/dscl /Search -append / CSPSearchPath "/Likewise - Active Directory"
then
    #
    # Add a plist file that adds the DS plugin to the search list and then
    # removes itself.
    #
    startup_dir='/Library/StartupItems/com.beyondtrust.pbis.first_boot'

    echo "Arranging to add DS plugin to search list after reboot"
    mkdir -p "$startup_dir"
    cat > "$startup_dir/StartupParameters.plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>Description</key>
        <string>com.beyondtrust.pbis.first_boot</string>
        <key>OrderPreference</key>
        <string>Early</string>
        <key>Provides</key>
        <array>
                <string>com.beyondtrust.pbis.first_boot</string>
        </array>
        <key>Requires</key>
        <array>
        </array>
</dict>
</plist>
EOF

    cat > "$startup_dir/${startup_dir##*/}" << EOF
#!/bin/bash

. /etc/rc.common

StartService()
{
    /usr/bin/dscl /Search -append / CSPSearchPath "/Likewise - Active Directory"
    rm -rf "${startup_dir}"
}

StopService()
{
    : Nothing to do
}

RunService "\$1"
EOF

    chmod 0755 "$startup_dir/${startup_dir##*/}"
    unset startup_dir
fi

# Create Global Login Item entry for Likewise Logon Message.app
# to display licensing and password expiration warning messages on
# user logon activity.
configure_logon_message_application

# Add the ticketcopy login agent
configure_agent com.beyondtrust.pbis.ticketcopy

# Add PBIS Utilities folder to Applications location in Finder. Shortcut
# the Domain Join application to here.
if [ -d '/Applications/PBIS Utilities' ]; then
    _log "PBIS Utilities folder already exists"
else
    run mkdir -p '/Applications/PBIS Utilities'
fi

if [ -d '/Applications/PBIS Utilities/Domain Join.app' ]; then
    _log "Domain Join application already created in Utilities folder"
else
    run ln -s '@MK_BINDIR@/Domain Join.app' '/Applications/PBIS Utilities/.'
fi

domain=`@MK_BINDIR@/lsa ad-get-machine account 2>/dev/null | grep '  DNS Domain Name: ' | sed -e 's/  DNS Domain Name: //'`

if [ -n "$UPGRADING_FROM_5_0123" ]; then
    log "Likewise Identity Services Open 5.X has been successfully upgraded."
fi

if [ -n "$UPGRADING_FROM_6_0" ]; then
    log "Likewise Open 6.0 has been successfully upgraded."
fi

if [ -n "$UPGRADING_FROM_6_1" ]; then
    log "Likewise Open 6.1 has been successfully upgraded."
fi

if [ -z "$domain" ]; then
    _log ""
    _log "Use the domainjoin-cli program to join your computer to an Active "
    _log "Directory domain which will enable logons to your system with Active Directory "
    _log "user accounts."
else
    _log ""
    _log "Your computer is joined to $domain"
fi

exit 0
